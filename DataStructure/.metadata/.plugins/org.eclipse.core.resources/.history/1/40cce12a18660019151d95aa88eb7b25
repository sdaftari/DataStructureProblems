//In a 2D grid from (0, 0) to (N-1, N-1), every cell contains a 1, except those cells in the given list mines which are 0. What is the largest axis-aligned plus sign of 1s contained in the grid? 
//Return the order of the plus sign. If there is none, return 0. An "axis-aligned plus sign of 1s of order k" has some center grid[x][y] = 1 along with 4 arms of length k-1 going up, down, left, and right, and 
//made of 1s. This is demonstrated in the diagrams below. Note that there could be 0s or 1s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.
//Examples of Axis-Aligned Plus Signs of Order k:
//Order 1:
//000
//010
//000
//
//Order 2:
//00000
//00100
//01110
//00100
//00000
//
//Order 3:
//0000000
//0001000
//0001000
//0111110
//0001000
//0001000
//0000000

package Extra;
import java.util.*;

public class LargestPlusSign {
	For each position (i, j) of the grid matrix, we try to extend in each of the four directions (left, right, up, down) as long as possible, then take the minimum length of 1's out of the four directions as the order of the largest axis-aligned plus sign centered at position (i, j).
	public int orderOfLargestPlusSign(int N, int[][] mines) 
	{
        int[][] grid = new int[N][N];
        
        for (int i = 0; i < N; i++) 
            Arrays.fill(grid[i], N);

        for (int[] m : mines) 
            grid[m[0]][m[1]] = 0;

        for (int i = 0; i < N; i++) 
        {
        	int l = 0, r = 0, u = 0, d = 0;
            for (int j = 0, k = N - 1; j < N; j++, k--) 
            {
                grid[i][j] = Math.min(grid[i][j], l = (grid[i][j] == 0 ? 0 : l + 1));  // left direction
                grid[i][k] = Math.min(grid[i][k], r = (grid[i][k] == 0 ? 0 : r + 1));  // right direction
                grid[j][i] = Math.min(grid[j][i], u = (grid[j][i] == 0 ? 0 : u + 1));  // up direction
                grid[k][i] = Math.min(grid[k][i], d = (grid[k][i] == 0 ? 0 : d + 1));  // down direction
            }
        }

        int res = 0;

        for (int i = 0; i < N; i++) 
        {
            for (int j = 0; j < N; j++) 
                res = Math.max(res, grid[i][j]);
        }

        return res;
    }

	public static void main(String[] args) {
		int[][] mines = {{0,0,0,0,0},
						 {0,0,1,0,0},
						 {0,1,1,1,0},
						 {0,0,1,0,0},
						 {0,0,0,0,0}};
		
		LargestPlusSign obj = new LargestPlusSign();
		System.out.println(obj.orderOfLargestPlusSign(2, mines));
	}

}
