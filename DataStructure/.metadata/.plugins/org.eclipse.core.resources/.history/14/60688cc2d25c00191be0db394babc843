package Medium;

public class RelativeOrder {
	
	// Sort A1[0..m-1] according to the order 
    // defined by A2[0..n-1]. 
    static void sortAccording(int A1[], int A2[], int m,  
                                                 int n) 
    { 
        // The temp array is used to store a copy  
        // of A1[] and visited[] is used to mark the  
        // visited elements in temp[]. 
        int temp[] = new int[m], visited[] = new int[m]; 
        for (int i = 0; i < m; i++) 
        { 
            temp[i] = A1[i]; 
            visited[i] = 0; 
        } 
       
        // Sort elements in temp 
        Arrays.sort(temp); 
          
        // for index of output which is sorted A1[] 
        int ind = 0;   
       
        // Consider all elements of A2[], find them 
        // in temp[] and copy to A1[] in order. 
        for (int i = 0; i < n; i++) 
        { 
            // Find index of the first occurrence 
            // of A2[i] in temp 
            int f = first(temp, 0, m-1, A2[i], m); 
       
            // If not present, no need to proceed 
            if (f == -1) continue; 
       
            // Copy all occurrences of A2[i] to A1[] 
            for (int j = f; (j < m && temp[j] == A2[i]); 
                                                  j++) 
            { 
                A1[ind++] = temp[j]; 
                visited[j] = 1; 
            } 
        } 
       
        // Now copy all items of temp[] which are  
        // not present in A2[] 
        for (int i = 0; i < m; i++) 
            if (visited[i] == 0) 
                A1[ind++] = temp[i]; 
    } 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
