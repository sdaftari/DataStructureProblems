//We are given an elevation map, heights[i] representing the height of the terrain at that index. The width at each index is 1. After V units of water fall at index K, how much water is at each index?
//Water first drops at index K and rests on top of the highest terrain or water at that index. Then, it flows according to the following rules:
//If the droplet would eventually fall by moving left, then move left.
//Otherwise, if the droplet would eventually fall by moving right, then move right.
//Otherwise, rise at it's current position.
//Here, "eventually fall" means that the droplet will eventually be at a lower level if it moves in that direction. Also, "level" means the height of the terrain plus any water in that column.
//We can assume there's infinitely high terrain on the two sides out of bounds of the array. Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.
// Time: O(V*L)

package Medium;

public class PourWater {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public int[] pourWater(int[] heights, int V, int K) 
    {
        for(int i = 0; i < V; i++) 
        {
            int cur = K;
            // Move left
            while(cur > 0 && heights[cur] >= heights[cur - 1]) 
                cur--;
            
            // Move right
            while(cur < heights.length - 1 && heights[cur] >= heights[cur + 1]) 
                cur++;
            
            // Move left to K
            // If you have [3,3,1,1,1], V = 1 and K = 1, after "Move right", the droplet would be placed at 'cur' = 4
            // and "Move left to K" would be needed to adjust 'cur' back to 2, which is the correct place.
            while(cur > K && heights[cur] >= heights[cur - 1]) 
                cur--;
            
            heights[cur]++;
        }

        return heights;
    }
}
