//Given a binary array A of size N and an integer M. Find the maximum number of consecutive 1's produced by flipping at most M 0's.
//Example:
//Input:
//1
//11
//1 0 0 1 1 0 1 0 1 1 1
//2
//
//Output:
//8
//
//Explanation:
//Testcase 1: Maximum subarray is of size 8 which can be made subarray of all 1 after flipping two zeros to 1.

package Medium;

public class MaximizeOnes {
	
	static int arr[] = new int[]{1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1}; 
    
    // m is maximum of number zeroes allowed to flip 
    static void findZeroes(int m) 
    { 
        // Left and right indexes of current window 
        int wL = 0, wR = 0;  
      
        // Left index and size of the widest window  
        int bestL = 0, bestWindow = 0;  
      
        // Count of zeroes in current window 
        int zeroCount = 0;  
      
        // While right boundary of current window doesn't cross right end 
        while (wR < arr.length) 
        { 
            // If zero count of current window is less than m, widen the window toward right 
            if (zeroCount <= m) 
            { 
                if (arr[wR] == 0) 
                	zeroCount++; 
                // Increment wR in case of 0 and 1
                wR++; 
            } 
      
            // If zero count of current window is more than m, reduce the window from left 
            if (zeroCount > m) 
            { 
                if (arr[wL] == 0) 
                	zeroCount--; 
                wL++; 
            } 
      
            // Update widest window if this window size is more 
            if ((wR-wL > bestWindow) && (zeroCount <= m)) 
            { 
                bestWindow = wR-wL; 
                bestL = wL; 
            } 
        } 
      
        // Print positions of zeroes in the widest window 
        for (int i=0; i<bestWindow; i++) 
        { 
            if (arr[bestL+i] == 0) 
            System.out.print(bestL+i + " "); 
        } 
    }

	public static void main(String[] args) {
		 findZeroes(2); 

	}

}
