//Minimum insertions to form a palindrome. Given a string, find the minimum number of characters to be inserted to convert it to palindrome.
//The problem of finding minimum insertions can also be solved using Longest Common Subsequence (LCS) Problem. If we find out LCS of string and its reverse, we know how many maximum characters can form a palindrome. We need insert remaining characters. Following are the steps.
//1) Find the length of LCS of input string and its reverse. Let the length be ‘l’.
//2) The minimum number insertions needed is length of input string minus ‘l’.
//
//Time: O(n^2). Space: O(n^2)

package Medium;

public class FormPalindrome {
	
	// LCS based function to find minimum number 
    // of insersions 
    static int findMinInsertionsLCS(String str, int n) 
    { 
        // Using StringBuffer to reverse a String 
        StringBuffer sb = new StringBuffer(str); 
        sb.reverse(); 
        String revString = sb.toString(); 
  
        // The output is length of string minus 
        // length of lcs of str and it reverse 
        return (n - lcs(str, revString , n, n)); 
    } 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
