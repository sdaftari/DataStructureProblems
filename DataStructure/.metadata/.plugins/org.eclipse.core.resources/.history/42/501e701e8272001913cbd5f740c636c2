//Given an array you have to find  the max sum of i*A[i] where i is the index of the array obtained by rotating the element of the array one by one . Your task is to complete the function max_sum which takes 
//one argument which is the array A [ ] and returns an integer value denoting  the required max sum .
//Example:
//Input
//1
//4
//8 3 1 2
//Output
//29
//
//Explanation
//Above the configuration possible by rotating elements are
//3 1 2 8 here sum is 3*0+1*1+2*2+8*3 = 29
//1 2 8 3 here sum is 1*0+2*1+8*2+3*3 = 27
//2 8 3 1 here sum is 2*0+8*1+3*2+1*3 = 17
//8 3 1 2 here sum is 8*0+3*1+1*2+2*3 =  11
//Here the max sum is 29 

package Medium;

public class MaxSumInConfiguration {
	
	// Returns maximum value of i*arr[i] 
	static int maxSum(int arr[], int n) 
	{ 
		int res = Integer.MIN_VALUE; 
		  
		// Consider rotation beginning with i for all possible values of i. 
		for (int i = 0; i < n; i++) 
		{ 
		    int curr_sum = 0; 
		  
		    // We don't acutally rotate the array, but compute sum by finding indexes when arr[i] is first element 
		    for (int j = 0; j < n; j++) 
		    { 
		        int index = (i + j) % n; 
		        curr_sum += j * arr[index]; 
		    } 
		  
		    // Update result if required 
		    res = Math.max(res, curr_sum); 
		} 
		  
		return res; 
	} 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
