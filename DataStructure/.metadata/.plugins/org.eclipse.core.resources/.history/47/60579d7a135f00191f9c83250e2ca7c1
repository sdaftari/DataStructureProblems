package Medium;

public class LeftSmallRightGreater {
	
	int findElement(int arr[], int n) 
	{ 
	    // leftMax[i] stores maximum of arr[0..i-1] 
	    int leftMax[] = new int[n]; 
	    leftMax[0] = Integer.MIN_VALUE; 
	  
	    // Fill leftMax[]1..n-1] 
	    for (int i = 1; i < n; i++) 
	        leftMax[i] = max(leftMax[i-1], arr[i-1]); 
	  
	    // Initialize minimum from right 
	    int rightMin = INT_MAX; 
	  
	    // Traverse array from right 
	    for (int i=n-1; i>=0; i--) 
	    { 
	        // Check if we found a required element 
	        if (leftMax[i] < arr[i] && rightMin > arr[i]) 
	             return i; 
	  
	        // Update right minimum 
	        rightMin = min(rightMin, arr[i]); 
	    } 
	  
	    // If there was no element matching criteria 
	    return -1; 
	} 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
