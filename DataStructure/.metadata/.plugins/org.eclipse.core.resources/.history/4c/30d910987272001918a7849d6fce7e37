//Example for closest three sum:
//Given array nums = [-1, 2, 1, -4], and target = 1.
//The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

//Given an array of integers, write a function that returns true if there is a triplet (a, b, c) that satisfies a2 + b2 = c2.
//Example:
//Input:
//3 2 4 6 5
//Output:Yes
//Explanation:
//Testcase 1: a=3, b=4, and c=5 forms a pythagorean triplet, so we print "Yes"
//Time complexity of this method is O(n2).

package Medium;
import java.util.*;

// Time: O(n^2) for both
public class ThreeSum {
	public static void main(String[] args) {
	}

	public List<List<Integer>> threeSum(int[] nums) 
	{
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i + 2 < nums.length; i++) 
        {
        	// skip same result
            if (i > 0 && nums[i] == nums[i - 1])               
                continue;
        
            int j = i + 1, k = nums.length - 1;  
            int target = -nums[i];
            while (j < k) 
            {
                if (nums[j] + nums[k] == target) 
                {
                    res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                    // skip same result
                    while (j < k && nums[j] == nums[j - 1]) 
                    	j++;  
                    // skip same result
                    while (j < k && nums[k] == nums[k + 1]) 
                    	k--;  
                } 
                else if (nums[j] + nums[k] > target) 
                    k--;
                else 
                    j++;
            }
        }
        return res;
    }
	
	// Similar code to get the closest sum of target
	public int threeSumClosest(int[] nums, int target) 
	{
        int result = nums[0] + nums[1] + nums[nums.length - 1];
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++)
        {
            int start = i + 1, end = nums.length - 1;
            while (start < end)
            {
                int sum = nums[i] + nums[start] + nums[end];
                if (sum > target)
                    end--;
                else
                    start++;
                
                if (Math.abs(sum - target) < Math.abs(result - target)) 
                    result = sum;
            }
        }
        
        return result;
    }
	
	 static boolean isTriplet(int arr[], int n) 
    { 
        // Square array elements 
        for (int i=0; i<n; i++) 
            arr[i] = arr[i]*arr[i]; 
   
        // Sort array elements 
        Arrays.sort(arr); 
   
        // Now fix one element one by one and find the other two elements 
        for (int i = n-1; i >= 2; i--) 
        { 
            // To find the other two elements, start two index 
            // variables from two corners of the array and move 
            // them toward each other 
            int l = 0; // index of the first element in arr[0..i-1] 
            int r = i-1; // index of the last element in arr[0..i-1] 
            while (l < r) 
            { 
                // A triplet found 
                if (arr[l] + arr[r] == arr[i]) 
                    return true; 
   
                // Else either move 'l' or 'r' 
                if (arr[l] + arr[r] < arr[i]) 
                   l++; 
                else
                   r--; 
            } 
        } 
   
        // If we reach here, then no triplet found 
        return false; 
    } 
	 
	// Function to count all possible triangles with arr[] 
	    // elements 
	    static int findNumberOfTriangles(int arr[]) 
	    { 
	        int n = arr.length; 
	        Arrays.sort(arr); 	  
	        int count = 0; 
	  
	        for (int i = 0; i < n-2; ++i) 
	        { 
	            int k = i + 2; 
	  
	            // Fix the second element 
	            for (int j = i+1; j < n; ++j) 
	            { 
	                /* Find the rightmost element which is smaller than the sum of two fixed elements 
	                while (k < n && arr[i] + arr[j] > arr[k]) 
	                    ++k; 
	  
	            /* Total number of possible triangles that can be 
	                formed with the two fixed elements is k - j - 1. 
	                The two fixed elements are arr[i] and arr[j]. All 
	                elements between arr[j+1] to arr[k-1] can form a 
	                triangle with arr[i] and arr[j]. One is subtracted 
	                from k because k is incremented one extra in above 
	                while loop. k will always be greater than j. If j 
	                becomes equal to k, then above loop will increment 
	                k, because arr[k] + arr[i] is always/ greater than 
	                arr[k] */
	                if(k > j) 
	                	count += k - j - 1; 
	            } 
	        } 
	        return count; 
	    } 

}
