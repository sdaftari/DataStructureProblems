package Medium;
import java.util.*;

public class VerticalOrder {

	public class TreeNode 
	{
		int val;
		TreeNode left;		
		TreeNode right;
		TreeNode(int x) { val = x; }
	}
	
	public List<List<Integer>> verticalTraversal(TreeNode root) 
    {
        List<List<Integer>> res = new ArrayList<>();
	    if (root == null) 
	        return res;
	    
	    //PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
	    Map<Integer, PriorityQueue<Integer>> map = new HashMap<>();
	    Queue<TreeNode> q = new LinkedList<>();
	    Queue<Integer> cols = new LinkedList<>();
	    
	    q.add(root);
	    cols.add(0);
	    
	    int min = 0;
	    int max = 0;
	    
	    while (!q.isEmpty())
	    {
	    	TreeNode node = q.poll();
	    	int col = cols.poll();
	    	
	    	if (!map.containsKey(col)) 
	            map.put(col, new PriorityQueue<Integer>());
	    	
	        map.get(col).add(node.val);
	        
	        if (node.left != null) 
	        {
	            q.add(node.left); 
	            cols.add(col - 1);
	            min = Math.min(min, col - 1);
	        }
	        
	        if (node.right != null) 
	        {                                              
	            q.add(node.right);
	            cols.add(col + 1);
	            max = Math.max(max, col + 1);
	        }
	    }
	    
	    for (int i = min; i <= max; i++) 
	    {
	    	// Add each map value (list) to res
	    	PriorityQueue<Integer> pq1 = map.get(i);
	    	List<Integer> temp = new ArrayList<>();
	    	int size = pq1.size();
	    	for (int j = 0; j < size; j++)
	    		temp.add(pq1.poll());
	        res.add(temp);
	    }
        
        return res;
    }
	
	public static void main(String[] args) {
		VerticalOrder obj = new VerticalOrder();
		TreeNode root = obj.new TreeNode(0);
		root.left = obj.new TreeNode(2);
		root.right = obj.new TreeNode(1);
		
		
		root.left.left = obj.new TreeNode(3);
		
		root.left.left.left = obj.new TreeNode(4);
		root.left.left.right = obj.new TreeNode(5);
		
		root.left.left.left.right = obj.new TreeNode(7);
		root.left.left.right.left = obj.new TreeNode(6);

		root.left.left.left.right.left = obj.new TreeNode(10);
		root.left.left.left.right.right = obj.new TreeNode(8);
		
		root.left.left.right.left.left = obj.new TreeNode(11);
		root.left.left.right.left.right = obj.new TreeNode(9);
		
		List<List<Integer>> ans = obj.verticalTraversal(root);
		for (List<Integer> list : ans)
		{
			System.out.println(list);
		}
	}

}
