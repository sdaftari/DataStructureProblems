package Extra;
import java.util.*;

public class HamiltonPath {

	public static void printAllHamiltonianPaths(Main g, int v,
			 boolean[] visited, List<Integer> path, int N)
	{
	// if all the vertices are visited, then
	// hamiltonian path exists
	if (path.size() == N)
	{
	// print hamiltonian path
	for (int i : path)
	System.out.print(i + " ");
	System.out.println();
	
	return;
	}
	
	// Check if every edge starting from vertex v leads
	// to a solution or not
	for (int w : g.adjList.get(v))
	{
	// process only unvisited vertices as hamiltonian
	// path visits each vertex exactly once
	if (!visited[w])
	{
	visited[w] = true;
	path.add(w);
	
	// check if adding vertex w to the path leads
	// to solution or not
	printAllHamiltonianPaths(g, w, visited, path, N);
	
	// Backtrack
	visited[w] = false;
	path.remove(path.size()-1);
	}
	}
	}
	
	public static void main(String[] args)
	{
	// vector of graph edges as per above diagram
	List<Edge> edges = Arrays.asList(
	new Edge(0, 1), new Edge(0, 2), new Edge(0, 3),
	new Edge(1, 2), new Edge(1, 3), new Edge(2, 3)
	);
	
	// Set number of vertices in the graph
	final int N = 4;
	
	// create a graph from edges
	Main g = new Main(edges, N);
	
	// starting node
	int start = 0;
	
	// add starting node to the path
	List<Integer> path = new ArrayList<>();
	path.add(start);
	
	// mark start node as visited
	boolean[] visited = new boolean[N];
	visited[start] = true;
	
	printAllHamiltonianPaths(g, start, visited, path, N);
	}

}
