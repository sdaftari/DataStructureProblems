package Medium;
import java.util.*;

public class ContiguousElements {
	
//	Insert all the elements in the hash table. Now pick the first element and keep on incrementing in its value by 1 till you find a value not present in the hash table. 
//	Again pick the first element and keep on decrementing in its value by 1 till you find a value not present in the hash table. 
//	Get the count of elements (obtained by this process) which are present in the hash table. If the count equals hash size print “Yes” else “No”.
	
	// Function to check whether the array  
    // contains a set of contiguous integers 
    static Boolean areElementsContiguous(int arr[], int n) 
    { 
        // Storing elements of 'arr[]' in  
        // a hash table 'us' 
        HashSet<Integer> us = new HashSet<Integer>(); 
          
        for (int i = 0; i < n; i++) 
            us.add(arr[i]); 
  
        // As arr[0] is present in 'us' 
        int count = 1; 
  
        // Starting with previous smaller  
        // element of arr[0] 
        int curr_ele = arr[0] - 1; 
  
        // If 'curr_ele' is present in 'us' 
        while (us.contains(curr_ele) == true) { 
  
            // increment count 
            count++; 
  
            // update 'curr_ele" 
            curr_ele--; 
        } 
  
        // Starting with next greater  
        // element of arr[0] 
        curr_ele = arr[0] + 1; 
  
        // If 'curr_ele' is present in 'us' 
        while (us.contains(curr_ele) == true) { 
  
            // increment count 
            count++; 
  
            // update 'curr_ele" 
            curr_ele++; 
        } 
  
        // Returns true if array contains a set of 
        // contiguous integers else returns false 
        return (count == (us.size())); 
    } 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
