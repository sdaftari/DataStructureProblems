//Given an array ‘pre[]’ that represents Preorder traversal of a spacial binary tree where every node has either 0 or 2 children. One more array ‘preLN[]’ is given which has only two possible values ‘L’ and ‘N’. 
//The value ‘L’ in ‘preLN[]’ indicates that the corresponding node in Binary Tree is a leaf node and value ‘N’ indicates that the corresponding node is non-leaf node. Write a function to construct the tree from the 
//given two arrays.
//Example:
//Input:  pre[] = {10, 30, 20, 5, 15},  preLN[] = {'N', 'N', 'L', 'L', 'L'}
//Output: Root of following tree
//          10
//         /  \
//        30   15
//       /  \
//      20   5

package Medium;

public class ConstructTreeFromPreorder {

//	class Index  
//	{ 
//	    int index = 0; 
//	}
	
	TreeNode root; 
    //Index myindex = new Index(); 
    static int index = 0;
	
    TreeNode constructTree(int n, int pre[], char preLN[])
    {        
        return constructTreeUtil(pre, preLN, 0, n, root);
    }
    
    TreeNode constructTreeUtil(int pre[], char preLN[], int index, int n, TreeNode temp) 
    {
        // store the current value of index in pre[] 
        //int index = index;  
   
        // Base Case: All nodes are constructed 
        if (index == n) 
            return null; 
   
        // Allocate memory for this node and increment index for 
        // subsequent recursive calls 
        temp = new TreeNode(pre[index]); 
        index++; 
   
        // If this is an internal node, construct left and right subtrees  
        // and link the subtrees 
        if (preLN[index] == 'N')  
        { 
            temp.left = constructTreeUtil(pre, preLN, index, n, temp.left); 
            temp.right = constructTreeUtil(pre, preLN, index, n, temp.right); 
        } 
   
        return temp;
    }
	
	public static void main(String[] args) {
		int[] pre = {10, 30, 20, 5, 15};
		char[] preLN = {'N', 'N', 'L', 'L', 'L'};
		ConstructTreeFromPreorder obj = new ConstructTreeFromPreorder();
		TreeNode ans = obj.constructTree(5, pre, preLN);
		System.out.println(ans.val);
	}

}
