//Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.
//The distance between two adjacent cells is 1.
//Example 1: 
//Input:
//0 0 0
//0 1 0
//0 0 0
//Output:
//0 0 0
//0 1 0
//0 0 0

package Medium;
import java.util.*;

public class Matrix01 {

	public int[][] updateMatrix(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        Queue<int[]> queue = new LinkedList<>();
        
        for (int i = 0; i < m; i++) 
        {
            for (int j = 0; j < n; j++) 
            {
                // If value is 0, the nearest point will be itself
                if (matrix[i][j] == 0) 
                    queue.offer(new int[] {i, j});
                // or set it to max value
                else 
                    matrix[i][j] = Integer.MAX_VALUE;
            }
        }
        
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        while (!queue.isEmpty()) 
        {
            int[] cell = queue.poll();
            for (int[] d : dirs) 
            {
                int r = cell[0] + d[0];
                int c = cell[1] + d[1];
                // If the original value of new location {r, c} is already less then continue
                if (r < 0 || r >= m || c < 0 || c >= n || matrix[r][c] <= matrix[cell[0]][cell[1]] + 1) 
                    continue;
                // Otherwise add the new location to queue and update the matrix value
                queue.add(new int[] {r, c});
                matrix[r][c] = matrix[cell[0]][cell[1]] + 1;
            }
        }
        
        return matrix;
    }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
