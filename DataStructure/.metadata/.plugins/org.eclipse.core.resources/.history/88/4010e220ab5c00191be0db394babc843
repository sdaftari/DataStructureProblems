
So we can iterate over all elements once and calculate their frequencies and if it is odd then we can include that in our final result by XORing it with the result.
Total time complexity of solution will be O(N)
filter_none
package Medium;

public class XOROfSubarrays {
	
	// Returns XOR of all subarray 
    // xors 
    static int getTotalXorOfSubarrayXors( 
                          int arr[], int N) 
    { 
          
        // initialize result by 0  
        // as (a XOR 0 = a) 
        int res = 0; 
      
        // loop over all elements once 
        for (int i = 0; i < N; i++) 
        { 
            // get the frequency of 
            // current element 
            int freq = (i + 1) * (N - i); 
      
            // Uncomment below line to print  
            // the frequency of arr[i] 
              
            // if frequency is odd, then  
            // include it in the result 
            if (freq % 2 == 1) 
                res = res ^ arr[i]; 
        } 
      
        // return the result 
        return res; 
    } 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
