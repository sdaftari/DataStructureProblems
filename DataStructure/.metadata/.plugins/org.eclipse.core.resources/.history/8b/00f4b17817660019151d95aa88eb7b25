//Given a string S of digits, such as S = "123456579", we can split it into a Fibonacci-like sequence [123, 456, 579].
//Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:
//0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);
//F.length >= 3;
//and F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.
//Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.
//Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.
//Example 1:
//Input: "123456579"
//Output: [123,456,579]

package Extra;
import java.util.*;

public class SplitArrayFibonacciSequence {
	
	public List<Integer> splitIntoFibonacci(String S) {
		List<Integer> ans = new ArrayList<>();
        helper(ans, S, 0);
        return ans;
    }
    
    public boolean helper(List<Integer> res, String S, int start) {
        if (start == S.length() && res.size() >= 3)
            return true;
        long num = 0;
        for (int i = start; i < S.length(); i++) {
            if (S.charAt(start) == '0' && i > start)
                break;
            num = num * 10 + (S.charAt(i) - '0');
            if (num > Integer.MAX_VALUE)
                break;
            if (res.size() >= 2 && res.get(res.size() - 1) + res.get(res.size() - 2) < num)
                break;
            if (res.size() <= 1 || res.get(res.size() - 1) + res.get(res.size() - 2) == num) {
                res.add((int) num);
                if (helper(res, S, i + 1))
                    return true;
                res.remove(res.size() - 1);
            }
        }
        return false;
    }

	public static void main(String[] args) {
		String input = "123456579";
		SplitArrayFibonacciSequence obj = new SplitArrayFibonacciSequence();
		System.out.println(obj.splitIntoFibonacci(input));
	}

}
