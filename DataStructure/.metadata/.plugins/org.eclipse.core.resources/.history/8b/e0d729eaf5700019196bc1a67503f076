//We are given an array A of positive integers, and two positive integers L and R (L <= R). 
//Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.
//Example :
//Input: 
//A = [2, 1, 4, 3]
//L = 2
//R = 3
//Output: 3
//Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].

// Time: O(n)

package Hard;

public class NumOfArraysBoundedByMaximum {

	public static void main(String[] args) {
		NumOfArraysBoundedByMaximum obj = new NumOfArraysBoundedByMaximum();
		int[] nums = new int[] {2, 1, 4, 3};
		System.out.println(obj.numSubarrayBoundedMax(nums, 2, 3));
	}

//	For example, for input A = [0, 1, 2, -1], L = 2, R = 3:
//	for 0, no valid subarray ends at 0;
//	for 1, no valid subarray ends at 1;
//	for 2, three valid subarrays end at 2, which are [0, 1, 2], [1, 2], [2];
//	for -1, the number of valid subarrays is the same as 2, which are [0, 1, 2, -1], [1, 2, -1], [2, -1];
	public int numSubarrayBoundedMax(int[] A, int L, int R) {
        int j=0, count=0, res=0;
        
        for(int i = 0; i < A.length; i++)
        {
        	// If current element is in the range, then 
            if(A[i] >= L && A[i] <= R)
            {
                res += i-j + 1;
                count = i-j + 1;
            }
            else if(A[i] < L)
                res += count;
            else
            {
                j = i+1;
                count = 0;
            }
        }
        return res;
    }
}
