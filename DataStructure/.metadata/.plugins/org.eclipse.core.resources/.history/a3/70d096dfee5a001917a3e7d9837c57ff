package Hard;

public class ModifyLinkedList {
	
	ListNode front, back;
    public ListNode modify(ListNode head)
    {
        if (head == null || head.next == null)
            return head;
        
        back = frontAndBackSplit(head);
        
        // reverse the 2nd(back) list 
        reverseList(back); 
        
        // modify the contents of 1st half     
        modifyTheContentsOf1stHalf(); 
        
        // agains reverse the 2nd(back) list 
        reverseList(back); 
          
        // concatenating the 2nd list back to the end of the 1st list 
        head = concatFrontAndBackList(front, back); 
          
        // pointer to the modified list 
        return head; 
    }
    
    // perfrom the required subtraction operation on 
    // the 1st half of the linked list 
    void modifyTheContentsOf1stHalf() 
    { 
        // traversing both the lists simultaneously 
        while (back != null) 
        { 
            // subtraction operation and node data 
            // modification 
            front.val = front.val - back.val; 
              
            front = front.next; 
            back = back.next; 
        } 
    } 
      
    // function to concatenate the 2nd(back) list at the end of 
    // the 1st(front) list and returns the head of the new list 
    ListNode concatFrontAndBackList(ListNode front, ListNode back) 
    { 
    	ListNode head = front; 
          
        while (front.next != null) 
            front = front.next;     
              
        front.next = back; 
          
        return head; 
    } 
    
    /* Function to reverse the linked list */
    void reverseList(ListNode head) 
    { 
    	ListNode current, prev, next; 
        current = head; 
        prev = null; 
        while (current != null) 
        { 
            next = current.next; 
            current.next = prev; 
            prev = current; 
            current = next; 
        }     
        head = prev; 
    } 
    
    Node frontAndBackSplit(ListNode head)
    {
    	ListNode slow, fast; 
      
        slow = head; 
        fast = head.next; 
          
        /* Advance 'fast' two nodes, and  
           advance 'slow' one node */
        while (fast != null) 
        { 
            fast = fast.next; 
            if (fast != null) 
            { 
                slow = slow.next; 
                fast = fast.next; 
            } 
        } 
          
         /* 'slow' is before the midpoint in the list,  
            so split it in two at that point. */
        front = head; 
        back = slow.next; 
        slow = null; 
        return back;
    }

	public static void main(String[] args) {
		ModifyLinkedList obj = new ModifyLinkedList();
		ListNode head = new ListNode(10);
		head.next = new ListNode(4);
		head.next.next = new ListNode(5);
		head.next.next.next = new ListNode(3);
		head.next.next.next.next = new ListNode(6);
		ListNode ans = obj.modify(head);
		while (ans != null)
		{
			System.out.println(ans.val + " ");
			ans = ans.next;
		}
	}

}
