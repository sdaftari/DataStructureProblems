//Example: (Paint House I
//Input: [[17,2,17],[16,16,5],[14,3,19]]
//Output: 10
//Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. Minimum cost: 2 + 5 + 3 = 10.

// Example: (Paint House II)
//There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent 
//houses have the same color.The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] 
//is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.
//Example:
//Input: [[1,5,3],[2,9,4]]
//Output: 5
//Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
//             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.

package Easy;

public class PaintHouse {
	
	public int minCost(int[][] costs) 
	{
        if(costs == null || costs.length == 0)
            return 0;
        int[] pre = new int[3];
        int[] cur = new int[3];
        for(int j = 0; j < 3; j++)
            pre[j] = costs[0][j];
        
        // if j==0, dp[i][0] = costs[i][0] + Math.min(the min cost of painting (i-1)th house with either blue or green) = 
        // costs[i][0] + Math.min(dp[i-1][1], dp[i-1][2]).
        for(int i = 1; i < costs.length; i++)
        {
            // If we paint red, we will paint i-1th house with min blue and green
            cur[0] = costs[i][0] + Math.min(pre[1], pre[2]);
            cur[1] = costs[i][1] + Math.min(pre[0], pre[2]);
            cur[2] = costs[i][2] + Math.min(pre[0], pre[1]);
            
            int[] temp = pre;
            pre = cur;
            cur = temp; 
        }
        
        return Math.min(pre[0], Math.min(pre[1], pre[2]));   
    }
	
	public int minCostII(int[][] costs) 
	{
	    if (costs == null || costs.length == 0) return 0;
	        
	    int n = costs.length, k = costs[0].length;
	    // min1 is the index of the 1st-smallest cost till previous house
	    // min2 is the index of the 2nd-smallest cost till previous house
	    int min1 = -1, min2 = -1;
	    
	    for (int i = 0; i < n; i++) 
	    {
	        int last1 = min1, last2 = min2;
	        min1 = -1; min2 = -1;
	        
	        for (int j = 0; j < k; j++) 
	        {
	            if (j != last1) {
	                // current color j is different to last min1
	                costs[i][j] += last1 < 0 ? 0 : costs[i - 1][last1];
	            } else {
	                costs[i][j] += last2 < 0 ? 0 : costs[i - 1][last2];
	            }
	            
	            // find the indices of 1st and 2nd smallest cost of painting current house i
	            if (min1 < 0 || costs[i][j] < costs[i][min1]) {
	                min2 = min1; min1 = j;
	            } else if (min2 < 0 || costs[i][j] < costs[i][min2]) {
	                min2 = j;
	            }
	        }
	    }
	    
	    return costs[n - 1][min1];
	}

}
