//On a 2-dimensional grid, there are 4 types of squares:
//1 represents the starting square.  There is exactly one starting square.
//2 represents the ending square.  There is exactly one ending square.
//0 represents empty squares we can walk over.
//-1 represents obstacles that we cannot walk over.
//Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.
//Example 1:
//Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
//Output: 2
//Explanation: We have the following two paths: 
//1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
//2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
First find out where the start and the end is.
Also We need to know the number of empty cells.

We we try to explore a cell,
it will change 0 to -2 and do a dfs in 4 direction.

If we hit the target and pass all empty cells, increment the result.

Time complexity is as good as dp, but it take less space and easier to implement.
package Hard;

public class UniquePathsIII {
	
	int res = 0, empty = 1, sx, sy, ex, ey;
    public int uniquePathsIII(int[][] grid) 
    {
        int m = grid.length, n = grid[0].length;
        for (int i = 0; i < m; ++i) 
        {
            for (int j = 0; j < n; ++j) 
            {
                if (grid[i][j] == 0) 
                	empty++;
                else if (grid[i][j] == 1) 
                {
                    sx = i;
                    sy = j;
                } 
                else if (grid[i][j] == 2) 
                {
                    ex = i;
                    ey = j;
                }
            }
        }
        dfs(grid, sx, sy);
        return res;
    }

    public void dfs(int[][] grid, int x0, int y0) 
    {
        if (check(grid, x0, y0) == false) 
        	return;
        if (x0 == ex && y0 == ey) 
        {
            if (empty == 0) 
            	res++;
            return;
        }
        grid[x0][y0] = -2;
        empty--;
        dfs(grid, x0 + 1, y0);
        dfs(grid, x0 - 1, y0);
        dfs(grid, x0, y0 + 1);
        dfs(grid, x0, y0 - 1);
        grid[x0][y0] = 0;
        empty++;
    }

    public boolean check(int[][] grid, int i, int j) 
    {
        int m = grid.length, n = grid[0].length;
        return 0 <= i && i < m && 0 <= j && j < n && grid[i][j] >= 0;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
