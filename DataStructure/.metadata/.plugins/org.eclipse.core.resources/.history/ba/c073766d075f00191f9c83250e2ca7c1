// Top K in stream
//Given N numbers in an array. Your task is to keep at-most K numbers at the top (According to their frequency).  We basically need to print top k numbers when input stream has included k distinct elements, 
//else need to print all distinct elements sorted by frequency.
//Example:
//Input:
//2
//5 4
//5 2 1 3 2
//5 4
//5 2 1 3 4
//Output:
//5 2 5 1 2 5 1 2 3 5 2 1 3 5 
//5 2 5 1 2 5 1 2 3 5 1 2 3 4 
//
//Explanation:
//For 1st test case:
//arr[] = 5 2 1 3 2
//Firstly their was 5 whose frequency is max till now. so print 5.
//Then 2 , which is smaller than 5 but their frequency is same so print 2 5.
//Then 1, Which is smallet among all the number arrived, so print 1 2 5.
//Then 3 , so print 1 2 3 5
//Then again 2, which has the highest frequency among all number so 2 1 3 5.
//
//For 2nd test case:
//arr[] = 5 2 1 3 4
//Firstly their was 5 whose frequency is max till now. so print 5.
//Then 2 , which is smaller than 5 but their frequency is same so print 2 5.
//Then 1, Which is smallest among all the number arrived, so print 1 2 5.
//Then 3 , so print 1 2 3 5.
//Then 4, so 1 2 3 4 as K is 4 so print at-most k elements.

package Medium;
import java.util.*;
import ArrayU

class Pair{
    int num;
    int count;
    public Pair(int num, int count){
        this.num=num;
        this.count=count;
    }
}

public class TopKFrequentNumbers {
	
	public static int find(int[] a, int target)
	{
		for (int i = 0; i < a.length; i++)
			if (a[i] == target)
				return i;

		return -1;
	}
	
	// Top K in array
    public List<Integer> topKFrequent(int[] nums, int k) {
        //count the frequency for each element
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num: nums){
            if(map.containsKey(num)){
                map.put(num, map.get(num)+1);
            }else{
                map.put(num, 1);
            }
        }
 
        // create a min heap
        PriorityQueue<Pair> queue = new PriorityQueue<>(Comparator.comparing(Pair->Pair.count));
 
        //maintain a heap of size k.
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            Pair p = new Pair(entry.getKey(), entry.getValue());
            queue.offer(p);
            if(queue.size()>k){
                queue.poll();
            }
        }
 
        //get all elements from the heap
        List<Integer> result = new ArrayList<>();
        while(queue.size()>0){
            result.add(queue.poll().num);
        }
 
        //reverse the order
        Collections.reverse(result);
 
        return result;
    }
    
    // Top K in stream
    // Function to print top k numbers 
    void kTop(int a[], int n, int k) 
    { 
        // vector of size k+1 to store elements 
        int[] top = new int[k+1];
      
        // array to keep track of frequency 
        Map<Integer, Integer> map = new HashMap<>(); 
      
        // iterate till the end of stream 
        for (int m = 0; m < n; m++) 
        { 
            // increase the frequency 
        	map.put(a[m], map.getOrDefault(a[m], 0) + 1);
      
            // store that element in top vector 
            top[k] = a[m]; 
      
            // search in top vector for same element 
            int it = find(a, a[m]);
      
            // iterate from the position of element to zero 
            for (int i = distance(top.begin(), it) - 1; i >= 0; --i) 
            { 
                // compare the frequency and swap if higher 
                // frequency element is stored next to it 
                if (freq[top[i]] < freq[top[i + 1]]) 
                    swap(top[i], top[i + 1]); 
      
                // if frequency is same compare the elements 
                // and swap if next element is high 
                else if ((freq[top[i]] == freq[top[i + 1]]) 
                         && (top[i] > top[i + 1])) 
                    swap(top[i], top[i + 1]); 
                else
                    break; 
            } 
      
            // print top k elements 
            for (int i = 0; i < k && top[i] != 0; ++i) 
                cout << top[i] << ' '; 
        } 
        cout << endl; 
    } 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
