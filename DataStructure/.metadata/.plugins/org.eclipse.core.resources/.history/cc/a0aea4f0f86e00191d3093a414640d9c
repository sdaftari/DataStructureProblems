package Medium;
import java.util.*;

public class MagicDictionary {
	Map<String, List<int[]>> map = new HashMap<>();
    /** Initialize your data structure here. */
    public MagicDictionary() {
    }
    
    /** Build a dictionary through a list of words */
    For each word in dict, for each char, remove the char and put the rest of the word as key, a pair of index of the removed char and the char as part of value list into a map. e.g.
    "hello" -> {"ello":[[0, 'h']], "hllo":[[1, 'e']], "helo":[[2, 'l'],[3, 'l']], "hell":[[4, 'o']]}
    public void buildDict(String[] dict) 
    {
        for (String s : dict) 
        {
            for (int i = 0; i < s.length(); i++) 
            {
                String key = s.substring(0, i) + s.substring(i + 1);
                int[] pair = new int[] {i, s.charAt(i)};
                
                List<int[]> val = map.getOrDefault(key, new ArrayList<int[]>());
                val.add(pair);
                
                map.put(key, val);
            }
        }
    }
    
    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
    public boolean search(String word) 
    {
        for (int i = 0; i < word.length(); i++) 
        {
            String key = word.substring(0, i) + word.substring(i + 1);
            if (map.containsKey(key)) 
            {
                for (int[] pair : map.get(key)) 
                {
                    if (pair[0] == i && pair[1] != word.charAt(i)) 
                    	return true;
                }
            }
        }
        return false;
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
