//Given an array of 0's and 1's your task is to complete the function maxLen which returns size of the largest sub array with equal number of 0's and 1's .
//The function maxLen takes 2 arguments. The first argument is the array A[] and second argument is the size 'N' of the array A[] .
//Example:
//Input 
//0 1 0 1
//Output
//4
//
//Time Complexity: O(n)
//Auxiliary Space: O(n)

package Medium;
import java.util.*;

public class LargestSubarrayOf0And1 {
	
	// Returns largest subarray with equal number of 0s and 1s 
	   
    int maxLen(int arr[], int n)  
    { 
        // Creates an empty hashMap hM    
        HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>(); 
  
        int sum = 0;     // Initialize sum of elements 
        int max_len = 0; // Initialize result
  
        for (int i = 0; i < n; i++)  
            arr[i] = (arr[i] == 0) ? -1 : 1; 
  
        // Code similar to Longest subarray with sum = 0
        // Traverse through the given array 
        for (int i = 0; i < arr.length; i++) 
        { 
            // Add current element to sum 
            sum += arr[i]; 
  
            if (arr[i] == 0 && max_len == 0) 
                max_len = 1; 
  
            // 
            if (sum == 0) 
                max_len = i+1; 
  
            // Look this sum in hash table 
            Integer prev_i = hM.get(sum); 
  
            // If this sum is seen before, then update max_len. it means we have equal +ve and -ve
            // So update max_len in that case only
            if (prev_i != null) 
               max_len = Math.max(max_len, i-prev_i); 
            else  // Else put this sum in hash table 
               hM.put(sum, i); 
        } 
  
        return max_len; 
    } 
  

	public static void main(String[] args) {
		int[] arr = {0, 1, 0, 1};
		LargestSubarrayOf0And1 obj = new LargestSubarrayOf0And1();
		System.out.println(obj.maxLen(arr, arr.length));
	}

}
