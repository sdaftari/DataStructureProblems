// Next Greater Element I
//You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. 
//Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
//The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.
//Example 1:
//Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
//Output: [-1,3,-1]

// Next Greater Element II
//Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. 
//The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. 
//If it doesn't exist, output -1 for this number.
//Example 1:
//Input: [1,2,1]
//Output: [2,-1,2]
//Explanation: The first 1's next greater number is 2; 
//The number 2 can't find next greater number; 
//The second 1's next greater number needs to search circularly, which is also 2.

//Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. 
//If no such positive 32-bit integer exists, you need to return -1.
//Example 1:
//Input: 12
//Output: 21
//Example 2:
//Input: 21
//Output: -1

package Hard;
import java.util.*;

public class NextGreaterElement {
	
	public int[] nextGreaterElementI(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>(); // map from x to next greater element of x
        Stack<Integer> stack = new Stack<>();
        for (int num : nums2) 
        {
        	// If greater number than top is found, pop the number and add it to the map with greater number as value 
            while (!stack.isEmpty() && stack.peek() < num)
                map.put(stack.pop(), num);
            
            // Push each num on stack
            stack.push(num);
        }  
        // Check the value in map, else return -1
        for (int i = 0; i < nums1.length; i++)
            nums1[i] = map.getOrDefault(nums1[i], -1);
        return nums1;
    }
	
	public int[] nextGreaterElementsII(int[] nums) {
        int len = nums.length;
        int[] res = new int[len];
        
        Stack<Integer> stack = new Stack<>();
        
        // Insert index into stack from back
        for (int i = len-1; i >= 0; i--)
            stack.push(i);
        
        for (int i = len-1; i >= 0; i--)
        {
            res[i] = -1;
            // Since we need to find the next greater element, pop from stack until greater element is found
            while (!stack.isEmpty() && nums[stack.peek()]  <= nums[i])
                stack.pop();
            
            // Add the greater element in res
            if (!stack.isEmpty())
                res[i] = nums[stack.peek()];
           
            // Always add index to stack for next elements 
            stack.add(i);
        }
        
        return res;
    }
	
	public int nextGreaterElementIII(int n) {
        char[] s = (""+n).toCharArray();
        int i = s.length - 2;
        // I) Start from the right most digit and 
        // find the first digit that is
        // smaller than the digit next to it.
        while (i >= 0 && s[i+1] <= s[i])
            i--;
        
        // If no such digit is found, its the edge case 1.
        if (i < 0)
            return -1;
        
        // II) Find the smallest digit on right side of (i-1)'th 
        // digit that is greater than number[i-1]
        int j = s.length - 1;
        // Get j such that a[i] < a[j]
        while (j >= 0 && s[j] <= s[i])
            j--;
        
        // III) Swap the above found smallest digit with 
        // number[i-1]
        swap(s, i, j);
        reverse(s, i+1);
        try{
            return Integer.parseInt(new String(s));
        }
        catch(Exception e) {
            return -1;
        }
    }
    
    public void swap(char[] s, int i, int j)
    {
        char temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
    
    public void reverse(char[] s, int start)
    {
        int i = start, j = s.length - 1;
        while (i < j)
        {
            swap(s, i, j);
            i++;
            j--;
        }
    }

	public static void main(String[] args) {
		int[] nums1 = {4,1,2};
		int[] nums2 = {1,3,4,2};
		NextGreaterElement obj = new NextGreaterElement();
		int[] res = obj.nextGreaterElementI(nums1, nums2); 
	}

}
