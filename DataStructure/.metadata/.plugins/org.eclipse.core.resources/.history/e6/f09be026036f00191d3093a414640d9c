//There are N piles of stones arranged in a row. The i-th pile has stones[i] stones. A move consists of merging exactly K consecutive piles into one pile, and the cost of this move is equal to the total number 
//of stones in these K piles. Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return -1.
//Example 1:
//Input: stones = [3,2,4,1], K = 2
//Output: 20
//Explanation: 
//We start with [3, 2, 4, 1].
//We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].
//We merge [4, 1] for a cost of 5, and we are left with [5, 5].
//We merge [5, 5] for a cost of 10, and we are left with [10].
//The total cost was 20, and this is the minimum possible.

package Medium;

public class minCostToMergeStones {

	public int mergeStones(int[] stones, int K) 
	{
        int n = stones.length;
        if ((n - 1) % (K - 1) > 0) 
        	return -1;

        int[] prefix = new int[n+1];
        for (int i = 0; i <  n; i++)
            prefix[i + 1] = prefix[i] + stones[i];

        int[][] dp = new int[n][n];
        for (int m = K; m <= n; ++m)
            for (int i = 0; i + m <= n; ++i) 
            {
                int j = i + m - 1;
                dp[i][j] = Integer.MAX_VALUE;
                for (int mid = i; mid < j; mid += K - 1)
                    dp[i][j] = Math.min(dp[i][j], dp[i][mid] + dp[mid + 1][j]);
                if ((j - i) % (K - 1) == 0)
                    dp[i][j] += prefix[j + 1] - prefix[i];
            }
        return dp[0][n - 1];
    }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
