//Implement a basic calculator to evaluate a simple expression string.
//The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .
//Example:
//Input: "(1+(4+5+2)-3)+(6+8)"
//Output: 23

package Hard;
import java.util.*;

public class BasicCalculator {
	
	public int basicCalculatorI(String s) {
	    Stack<Integer> stack = new Stack<Integer>();
	    int result = 0;
	    int number = 0;
	    int sign = 1;
	    for(int i = 0; i < s.length(); i++)
	    {
	        char c = s.charAt(i);
	        // it should be one digit from the current number
	        if(Character.isDigit(c))
	            number = 10 * number + (int)(c - '0');
	        // add the previous number and start a new number
	        else if(c == '+')
	        {
	            result += sign * number;
	            number = 0;
	            sign = 1;
	        }
	        else if(c == '-')
	        {
	            result += sign * number;
	            number = 0;
	            sign = -1;
	        }
	        //push the previous result and the sign into the stack, set result to 0, just calculate the new result within the parenthesis.
	        else if(c == '(')
	        {
	            //we push the result first, then sign;
	            stack.push(result);
	            stack.push(sign);
	            //reset the sign and result for the value in the parenthesis
	            sign = 1;   
	            result = 0;
	        }
	        // pop out the top two numbers from stack, first one is the sign before this pair of parenthesis, second is the temporary result before this pair of parenthesis. We add them together.
	        else if(c == ')')
	        {
	            result += sign * number;  
	            number = 0;
	            result *= stack.pop();    //stack.pop() is the sign before the parenthesis
	            result += stack.pop();   //stack.pop() now is the result calculated before the parenthesis	            
	        }
	    }
	    if(number != 0) 
	    	result += sign * number;
	    return result;
	}
	
	//	The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.
	//	Example 1:
	//	Input: "3+2*2"
	//	Output: 7
	public int basicCalculatorII(String s) 
	{
        int len;
        if(s == null || (len = s.length())==0) 
        	return 0;
        Stack<Integer> stack = new Stack<Integer>();
        int num = 0;
        char sign = '+';
        for(int i = 0; i < len; i++)
        {
            if(Character.isDigit(s.charAt(i)))
                num = num*10 + s.charAt(i)-'0';
            
            if((!Character.isDigit(s.charAt(i)) && ' '!=s.charAt(i)) || i==len-1)
            {
            	// first perform operation based on previous sign
                if(sign=='-')
                    stack.push(-num);
                if(sign=='+')
                    stack.push(num);
                if(sign=='*')
                    stack.push(stack.pop()*num);
                if(sign=='/')
                    stack.push(stack.pop()/num);
                
                // Then change the sign
                sign = s.charAt(i);
                num = 0;
            }
        }

        int re = 0;
        for(int i:stack)
            re += i;
        
        return re;
    }
	
	
//	o1 == 1 means +; o1 == -1 means - ;
//	o2 == 1 means *; o2 == -1 means /.
//	By default we have l1 = 0, o1 = 1, and l2 = 1, o2 = 1.
	public int basicCalculatotIII(String s) 
	{
        if (s == null || s.length() == 0) 
            return 0;
 
        // remove leading and trailing spaces and white spaces.
        s = s.trim().replaceAll("[ ]+", "");
 
        if (s == null || s.length() == 0) 
            return 0;
 
        Stack<Character> opStack = new Stack<>();
        Stack<Integer> numStack = new Stack<>();
 
        int i = 0;
        while (i < s.length()) 
        {
            if (Character.isDigit(s.charAt(i))) {
                int num = 0;
                while (i < s.length() && Character.isDigit(s.charAt(i))) {
                    num = num * 10 + Character.getNumericValue(s.charAt(i));
                    i++;
                }
                numStack.push(num);
            } else {
                char op = s.charAt(i);
                if (opStack.isEmpty()) {
                    opStack.push(op);
                    i++;
                } else if (op == '+' || op == '-') {
                    char top = opStack.peek();
                    if (top == '(') {
                        opStack.push(op);
                        i++;
                    } else {
                        calculate(numStack, opStack);
                    }
                } else if (op == '*' || op == '/') {
                    char top = opStack.peek();
                    if (top == '(') {
                        opStack.push(op);
                        i++;
                    } else if (top == '*' || top == '/') {
                        calculate(numStack, opStack);
                    } else if (top == '+' || top == '-') {
                        opStack.push(op);
                        i++;
                    }
                } else if (op == '(') {
                    opStack.push(op);
                    i++;
                } else if (op == ')') {
                    while (opStack.peek() != '(') {
                        calculate(numStack, opStack);
                    }
                    opStack.pop();
                    i++;
                }
            }
        }
 
        while (!opStack.isEmpty()) {
            calculate(numStack, opStack);
        }
 
        return numStack.peek();
    }
    
    private void calculate(Stack<Integer> numStack, Stack<Character> opStack) {
        int num2 = numStack.pop();
        int num1 = numStack.pop();
         
        char op = opStack.pop();
         
        int ans = 0;
         
        switch(op) {
            case '+':
                ans = num1 + num2;
            break;
            case '-':
                ans = num1 - num2;
            break;
            case '*':
                ans = num1 * num2;
            break;
            case '/':
                ans = num1 / num2;
            break;
        }
         
        numStack.push(ans);
    }

	public static void main(String[] args) {
		BasicCalculator obj = new BasicCalculator();
		String s = "(2+6* 3+5- (3*14/7+2)*5)+3";		
//		String s = "3-2*2";		
		System.out.println(obj.basicCalculatorIII(s));
	}

}
